"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const aws_redshift_1 = require("@aws-cdk/aws-redshift");
const aws_ec2_1 = require("@aws-cdk/aws-ec2");
const aws_iam_1 = require("@aws-cdk/aws-iam");
const aws_s3_1 = require("@aws-cdk/aws-s3");
const aws_glue_1 = require("@aws-cdk/aws-glue");
const uuid_1 = require("uuid");
const dotenv = require("dotenv");
dotenv.config({ path: '../.env' });
const ID_PREFIX = 'RedPandaTest';
const STACK_NAME = process.env.STACK_NAME;
const makeId = (suffix) => `${ID_PREFIX}${suffix}`;
class RedPandaTestStack extends core_1.Stack {
    constructor(scope, id) {
        super(scope, id);
        // Bucket
        const role = new aws_iam_1.Role(this, makeId('Role'), {
            assumedBy: new aws_iam_1.ServicePrincipal('redshift.amazonaws.com')
        });
        const bucket = new aws_s3_1.Bucket(this, makeId('BaseBucket'), {
            bucketName: `${STACK_NAME}-${process.env.BASE_BUCKET_ID}-${uuid_1.v4()}`,
            versioned: false,
            publicReadAccess: false,
            blockPublicAccess: aws_s3_1.BlockPublicAccess.BLOCK_ALL,
            removalPolicy: core_1.RemovalPolicy.DESTROY
        });
        bucket.grantReadWrite(role);
        // Redshift
        const vpc = new aws_ec2_1.Vpc(this, makeId('VPC'), {});
        const sg = new aws_ec2_1.SecurityGroup(this, makeId('SecurityGroup'), {
            vpc: vpc
        });
        sg.connections.allowFromAnyIpv4(aws_ec2_1.Port.tcp(5439));
        sg.node.addDependency(vpc);
        const { subnetIds } = vpc.selectSubnets({ subnetType: aws_ec2_1.SubnetType.PUBLIC });
        const subnetGroup = new aws_redshift_1.CfnClusterSubnetGroup(this, makeId('Subnets'), {
            description: 'Subnets for Redshift cluster',
            subnetIds
        });
        subnetGroup.applyRemovalPolicy(core_1.RemovalPolicy.RETAIN, {
            applyToUpdateReplacePolicy: true
        });
        const cluster = new aws_redshift_1.CfnCluster(this, makeId('Redshift'), {
            masterUsername: process.env.REDSHIFT_USERNAME || '',
            masterUserPassword: process.env.REDSHIFT_PASSWORD || '',
            dbName: process.env.REDSHIFT_DB || '',
            clusterType: 'single-node',
            port: parseInt(process.env.REDSHIFT_PORT || '5439'),
            nodeType: 'dc2.large',
            iamRoles: [role.roleArn],
            publiclyAccessible: true,
            vpcSecurityGroupIds: [sg.securityGroupId],
            clusterSubnetGroupName: subnetGroup.ref
        });
        cluster.node.addDependency(sg);
        // Glue
        const glueDB = new aws_glue_1.Database(this, makeId('GlueDB'), {
            databaseName: process.env.GLUE_DB || ''
        });
        const glueBucket = new aws_s3_1.Bucket(this, makeId('GlueBucket'), {
            bucketName: `${STACK_NAME}-${process.env.GLUE_BUCKET_ID}-${uuid_1.v4()}`,
            versioned: false,
            publicReadAccess: false,
            blockPublicAccess: aws_s3_1.BlockPublicAccess.BLOCK_ALL,
            removalPolicy: core_1.RemovalPolicy.DESTROY
        });
        new aws_glue_1.Table(this, makeId('GlueTable'), {
            bucket: glueBucket,
            database: glueDB,
            tableName: process.env.GLUE_TABLE_NAME || '',
            columns: [
                {
                    name: 'col0',
                    type: aws_glue_1.Schema.STRING
                },
                {
                    name: 'col1',
                    type: aws_glue_1.Schema.STRING
                }
            ],
            dataFormat: aws_glue_1.DataFormat.CSV
        });
        // Athena
        new aws_s3_1.Bucket(this, makeId('AthenaBucket'), {
            bucketName: `${STACK_NAME}-${process.env.ATHENA_BUCKET_ID}-${uuid_1.v4()}`,
            versioned: false,
            publicReadAccess: false,
            blockPublicAccess: aws_s3_1.BlockPublicAccess.BLOCK_ALL,
            removalPolicy: core_1.RemovalPolicy.DESTROY
        });
    }
}
exports.RedPandaTestStack = RedPandaTestStack;
const app = new core_1.App();
new RedPandaTestStack(app, 'RedPandaTestStack');
app.synth();
//# sourceMappingURL=data:application/json;base64,